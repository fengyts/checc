<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.checc.domain.UserCurrencyMapper">

	<resultMap type="com.checc.domain.UserCurrencyDO" id="UserCurrencyDOResultMap">
		<id column="id" property="id" />
        <result column="user_id" property="userId"/>
        <result column="total_currency" property="totalCurrency"/>
        <result column="freeze" property="freeze"/>
        <result column="refund" property="refund"/>
        <result column="create_time" property="createTime"/>
        <result column="modify_time" property="modifyTime"/>
	</resultMap>

	<sql id="MybatisUserCurrencyDAO_all_column_fields">
	      id,user_id,total_currency,freeze,refund,create_time,modify_time
 	</sql>
	<!-- 只有varchar char text类型 做 !='' 判断，生成代码时,其他类型时只做!=null 决断 0或fasle与空''是相同的，在mybatis中的动态语句中 -->
	<sql id="MybatisUserCurrencyDAO_dynamic_where_fields"><!-- xml转义字符需要 <![CDATA[   ]]> 标签-->
		<where>
			<if test="userId != null "> AND user_id=#{userId} </if>
			<if test="totalCurrency != null "> AND total_currency=#{totalCurrency} </if>
			<if test="freeze != null "> AND freeze=#{freeze} </if>
			<if test="refund != null "> AND refund=#{refund} </if>
		</where>
 	</sql>

	<select id="MybatisUserCurrencyDAO_selectById" parameterType="long" resultMap="UserCurrencyDOResultMap">
	SELECT
		<include refid="MybatisUserCurrencyDAO_all_column_fields" />
	FROM
		user_currency
	WHERE
		 id = #{id}
	</select>

    <insert id="MybatisUserCurrencyDAO_insert" parameterType="com.checc.domain.UserCurrencyDO" useGeneratedKeys="true">
        <selectKey resultType="long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID() AS id
        </selectKey>
        INSERT INTO user_currency(
				id,
				user_id,
				total_currency,
				freeze,
				refund,
				create_time,
				modify_time
		)values(
				#{id},
				#{userId},
				#{totalCurrency},
				#{freeze},
				#{refund},
				#{createTime},
				#{modifyTime}
		)
    </insert>

	<update id="MybatisUserCurrencyDAO_updateById" parameterType="com.checc.domain.UserCurrencyDO">
		UPDATE user_currency
		SET
					user_id = #{userId},
					total_currency = #{totalCurrency},
					freeze = #{freeze},
					refund = #{refund},
					modify_time = #{modifyTime}
		WHERE
			id = #{id}
	</update>

	<delete id="MybatisUserCurrencyDAO_deleteById" parameterType="long">
		DELETE FROM user_currency WHERE id = #{id}
	</delete>

	<update id="MybatisUserCurrencyDAO_update_dynamic" parameterType="com.checc.domain.UserCurrencyDO">
		UPDATE user_currency
		<set>
					<if test="userId != null ">user_id=#{userId},</if>
					<if test="totalCurrency != null ">total_currency=#{totalCurrency},</if>
					<if test="freeze != null ">freeze=#{freeze},</if>
					<if test="refund != null ">refund=#{refund},</if>
					<if test="modifyTime != null ">modify_time=#{modifyTime},</if>
		</set>
		WHERE id = #{id}
	</update>

 	<select id="MybatisUserCurrencyDAO_select_dynamic" resultMap="UserCurrencyDOResultMap" parameterType="com.checc.domain.UserCurrencyDO">
	     SELECT
	     	<include refid="MybatisUserCurrencyDAO_all_column_fields" />
		 FROM
		 	user_currency
			<include refid="MybatisUserCurrencyDAO_dynamic_where_fields" />
 	</select>

 	<select id="MybatisUserCurrencyDAO_select_dynamic_count" resultType="long" parameterType="com.checc.domain.UserCurrencyDO">
	     SELECT
	     	count(1)
		 FROM
		 	user_currency
	 	<include refid="MybatisUserCurrencyDAO_dynamic_where_fields" />
 	</select>

 	<select id="MybatisUserCurrencyDAO_select_dynamic_page_query" resultMap="UserCurrencyDOResultMap" parameterType="com.checc.domain.UserCurrencyDO">
	     SELECT
	     	<include refid="MybatisUserCurrencyDAO_all_column_fields" />
		 FROM
		 	user_currency
	 	<include refid="MybatisUserCurrencyDAO_dynamic_where_fields" />
	 	ORDER BY user_currency.id DESC
	 	Limit #{start},#{pageSize}
 	</select>
	
	<select id="MybatisUserCurrencyDAO_selectByUserId" parameterType="long" resultMap="UserCurrencyDOResultMap">
		SELECT
	     	<include refid="MybatisUserCurrencyDAO_all_column_fields" />
		 FROM
		 	user_currency
		 WHERE user_id = #{userId}
	</select>

 	<update id="MybatisUserCurrencyDAO_freeze_currency" parameterType="map">
 		UPDATE 
 			user_currency 
		SET 
			freeze = freeze + #{currency}, 
			modify_time = now()
 		WHERE 
 			user_id = #{userId}
 	</update>
 	
 	<update id="MybatisUserCurrencyDAO_increase_total_currency" parameterType="map">
 		UPDATE 
 			user_currency 
		SET 
			total_currency = total_currency + #{currency}, modify_time = now()
 		WHERE 
 			user_id = #{userId}
 	</update>
 	
 	<update id="MybatisUserCurrencyDAO_reduce_exchange_currency" parameterType="map">
 		UPDATE
			user_currency 
		SET 
			refund = refund - #{currency}, 
			modify_time = now()
 		WHERE 
 			user_id = #{userId}
 		AND refund - #{currency} &gt;= 0
 	</update>
 	
 	<update id="MybatisUserCurrencyDAO_refund_user_currency" parameterType="map">
 		<foreach collection="params.keys" item="key" separator=";" >
 			UPDATE
				user_currency 
			SET 
				freeze = freeze - #{params[${key}]},
				refund = refund + #{params[${key}]}, 
				modify_time = now()
	 		WHERE 
	 			user_id = #{key}
	 		AND freeze - #{params[${key}]} &gt;= 0
 		</foreach>
 	</update>
 	
 	<update id="MybatisUserCurrencyDAO_reduce_currency_success" parameterType="map">
 		<foreach collection="params.keys" item="key" separator=";" >
 			UPDATE
				user_currency 
			SET 
				freeze = freeze - #{params[${key}]},
				total_currency = total_currency - #{params[${key}]},
				modify_time = now()
	 		WHERE 
	 			user_id = #{key}
	 		AND freeze - #{params[${key}]} &gt;= 0
	 		AND total_currency - #{params[${key}]} &gt;= 0
 		</foreach>
 	</update>
 	
 	<update id="MybatisUserCurrencyDAO_refundCurrency" parameterType="map">
 		<if test="refundFlowMap != null">
	 		<foreach collection="refundFlowMap.keys" item="key">
	 			UPDATE
					user_currency 
				SET 
					freeze = freeze - #{refundFlowMap[${key}]},
					modify_time = now()
		 		WHERE 
		 			user_id = #{key}
		 		AND freeze - #{refundFlowMap[${key}]} &gt;= 0;
	 		</foreach>
 		</if>
 		<if test="refundSuccessMap != null">
	 		<foreach collection="refundSuccessMap.keys" item="key">
	 			UPDATE
					user_currency 
				SET 
					freeze = freeze - #{refundSuccessMap[${key}]},
					total_currency = total_currency - #{refundSuccessMap[${key}]},
					modify_time = now()
		 		WHERE 
		 			user_id = #{key}
		 		AND freeze - #{refundSuccessMap[${key}]} &gt;= 0
		 		AND total_currency - #{refundSuccessMap[${key}]} &gt;= 0;
	 		</foreach>
 		</if>
 		<if test="refundNotFlowMap != null">
 			<foreach collection="refundNotFlowMap.keys" item="key">
	 			UPDATE
					user_currency 
				SET 
					total_currency = total_currency - #{refundNotFlowMap[${key}]},
					freeze = freeze - #{refundNotFlowMap[${key}]},
					refund = refund + #{refundNotFlowMap[${key}]},
					modify_time = now()
		 		WHERE 
		 			user_id = #{key}
		 		AND total_currency - #{refundNotFlowMap[${key}]} &gt;= 0
		 		AND freeze - #{refundNotFlowMap[${key}]} &gt;= 0;
	 		</foreach>
 		</if>
 	</update>

</mapper>